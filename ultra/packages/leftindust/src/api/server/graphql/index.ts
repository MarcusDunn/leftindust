import {
  createClient,
  dedupExchange,
  cacheExchange,
  fetchExchange,
  makeOperation,
} from '@urql/svelte';
import { retryExchange } from '@urql/exchange-retry';
import { authExchange } from '@urql/exchange-auth';
import config from '@/../config.json';
import { auth } from '../firebase';
import type { ResolversTypes } from './requests';
import type { RangeInput } from './schema/leftindust.schema';
import type { User } from 'firebase/auth';

export type Data<T = keyof Partial<ResolversTypes>> = {
  type: T;
  id: string;
};

export const resolversRecord: { [K in keyof ResolversTypes]: Record<string, any> } = {
  Address: {},
  String: {},
  AddressEditInput: {},
  AddressInput: {},
  AddressType: {},
  AssignedSurvey: {},
  AssignedSurveyId: {},
  CanadianProvince: {},
  CaseAgnosticStringFilterInput: {},
  Boolean: {},
  Clinic: {},
  ClinicEditInput: {},
  ClinicId: {},
  ClinicIdInput: {},
  ClinicInput: {},
  ConvertTarget: {},
  Country: {},
  Crud: {},
  DataType: {},
  Date: {},
  Int: {},
  DateFilterInput: {},
  DateInput: {},
  DayOfWeek: {},
  Doctor: {},
  DoctorEditInput: {},
  DoctorExampleInput: {},
  DoctorId: {},
  DoctorIdInput: {},
  DoctorInput: {},
  Email: {},
  EmailInput: {},
  EmailType: {},
  EmergencyContact: {},
  EmergencyContactInput: {},
  Ethnicity: {},
  Event: {},
  EventEditInput: {},
  EventId: {},
  EventIdInput: {},
  EventInput: {},
  FirebaseInfo: {},
  FormFieldInput: {},
  Float: {},
  FormSectionInput: {},
  FormTemplateId: {},
  FormTemplateIdInput: {},
  FormTemplateInput: {},
  FoundationIcdCodeInput: {},
  GraphQLFormData: {},
  GraphQLFormSection: {},
  GraphQLFormTemplate: {},
  GraphQLPermissionInput: {},
  GraphQLProvince: {},
  GraphQLRecordInput: {},
  GraphQLVisitEditInput: {},
  GraphQlFormField: {},
  Group: {},
  GroupId: {},
  GroupIdInput: {},
  GroupInput: {},
  IcdEntityType: {},
  IcdFoundationEntity: {},
  IcdGuessType: {},
  IcdGuessWord: {},
  IcdLanguageSpecificText: {},
  IcdLinearizationEntity: {},
  IcdListFilterInput: {},
  IcdPostCoordinationScaleInfo: {},
  IcdPostcoordinationAvailability: {},
  IcdReallySimpleEntity: {},
  IcdSearchResult: {},
  IcdSimpleEntity: {},
  IcdSimplePropertyValue: {},
  IcdTerm: {},
  Long: {},
  Month: {},
  Mutation: {},
  NameEditInput: {},
  NameInfo: {},
  NameInput: {},
  Patient: {},
  PatientEditInput: {},
  ID: {},
  PatientExampleInput: {},
  PatientId: {},
  PatientIdInput: {},
  PatientInput: {},
  Permission: {},
  PermissionId: {},
  Permissions: {},
  Person: {},
  Phone: {},
  PhoneInput: {},
  PhoneType: {},
  Query: {},
  RangeInput: {},
  Record: {},
  RecordId: {},
  RecordIdInput: {},
  RecordType: {},
  Recurrence: {},
  RecurrenceEditSettingsInput: {},
  RecurrenceInput: {},
  Relationship: {},
  Sex: {},
  SortableField: {},
  Tables: {},
  TimeRangeInput: {},
  TimeZonedTime: {},
  UUID: {},
  User: {},
  UserEditInput: {},
  UserInput: {},
  UtcTime: {},
  UtcTimeInput: {},
  Visit: {},
  VisitId: {},
  VisitIdInput: {},
  VisitInput: {},
  WhiteSpaceAgnosticStringFilterInput: {},
  _FieldSet: {},
  _Service: {},
};

export const resolversArray: { [K in keyof ResolversTypes]: any[] } = {
  Address: [],
  String: [],
  AddressEditInput: [],
  AddressInput: [],
  AddressType: [],
  AssignedSurvey: [],
  AssignedSurveyId: [],
  CanadianProvince: [],
  CaseAgnosticStringFilterInput: [],
  Boolean: [],
  Clinic: [],
  ClinicEditInput: [],
  ClinicId: [],
  ClinicIdInput: [],
  ClinicInput: [],
  ConvertTarget: [],
  Country: [],
  Crud: [],
  DataType: [],
  Date: [],
  Int: [],
  DateFilterInput: [],
  DateInput: [],
  DayOfWeek: [],
  Doctor: [],
  DoctorEditInput: [],
  DoctorExampleInput: [],
  DoctorId: [],
  DoctorIdInput: [],
  DoctorInput: [],
  Email: [],
  EmailInput: [],
  EmailType: [],
  EmergencyContact: [],
  EmergencyContactInput: [],
  Ethnicity: [],
  Event: [],
  EventEditInput: [],
  EventId: [],
  EventIdInput: [],
  EventInput: [],
  FirebaseInfo: [],
  FormFieldInput: [],
  Float: [],
  FormSectionInput: [],
  FormTemplateId: [],
  FormTemplateIdInput: [],
  FormTemplateInput: [],
  FoundationIcdCodeInput: [],
  GraphQLFormData: [],
  GraphQLFormSection: [],
  GraphQLFormTemplate: [],
  GraphQLPermissionInput: [],
  GraphQLProvince: [],
  GraphQLRecordInput: [],
  GraphQLVisitEditInput: [],
  GraphQlFormField: [],
  Group: [],
  GroupId: [],
  GroupIdInput: [],
  GroupInput: [],
  IcdEntityType: [],
  IcdFoundationEntity: [],
  IcdGuessType: [],
  IcdGuessWord: [],
  IcdLanguageSpecificText: [],
  IcdLinearizationEntity: [],
  IcdListFilterInput: [],
  IcdPostCoordinationScaleInfo: [],
  IcdPostcoordinationAvailability: [],
  IcdReallySimpleEntity: [],
  IcdSearchResult: [],
  IcdSimpleEntity: [],
  IcdSimplePropertyValue: [],
  IcdTerm: [],
  Long: [],
  Month: [],
  Mutation: [],
  NameEditInput: [],
  NameInfo: [],
  NameInput: [],
  Patient: [],
  PatientEditInput: [],
  ID: [],
  PatientExampleInput: [],
  PatientId: [],
  PatientIdInput: [],
  PatientInput: [],
  Permission: [],
  PermissionId: [],
  Permissions: [],
  Person: [],
  Phone: [],
  PhoneInput: [],
  PhoneType: [],
  Query: [],
  RangeInput: [],
  Record: [],
  RecordId: [],
  RecordIdInput: [],
  RecordType: [],
  Recurrence: [],
  RecurrenceEditSettingsInput: [],
  RecurrenceInput: [],
  Relationship: [],
  Sex: [],
  SortableField: [],
  Tables: [],
  TimeRangeInput: [],
  TimeZonedTime: [],
  UUID: [],
  User: [],
  UserEditInput: [],
  UserInput: [],
  UtcTime: [],
  UtcTimeInput: [],
  Visit: [],
  VisitId: [],
  VisitIdInput: [],
  VisitInput: [],
  WhiteSpaceAgnosticStringFilterInput: [],
  _FieldSet: [],
  _Service: [],
};


export const client = createClient({
  url: `${config.mockingbird.address}:${config.mockingbird.port}/graphql`,
  maskTypename: true,
  exchanges: [
    dedupExchange,
    cacheExchange,
    retryExchange({
      initialDelayMs: 1000,
      maxDelayMs: 15000,
      randomDelay: true,
      maxNumberAttempts: 2,
      retryIf: (error) => !!(error && error.networkError),
    }),
    authExchange<{ token: string | undefined } | undefined>({
      getAuth: async () => {
        const user: User = await new Promise((resolve, reject) => {
          const unsubscribe = auth.onAuthStateChanged((u) => {
            unsubscribe();
            if (u) resolve(u);
          }, reject);
        });
        
        const token = await user?.getIdToken();
        
        return { token };
      },
      addAuthToOperation: ({ authState, operation }) => {
        if (!authState || !authState.token) {
          return operation;
        }
      
        const fetchOptions =
          typeof operation.context.fetchOptions === 'function'
            ? operation.context.fetchOptions()
            : operation.context.fetchOptions || {};
      
        return makeOperation(operation.kind, operation, {
          ...operation.context,
          fetchOptions: {
            ...fetchOptions,
            headers: {
              ...fetchOptions.headers,
              'mediq-auth-token': authState.token,
            },
          },
        });
      },
    }),
    fetchExchange,
  ],
});

export const defaultRangeInput: RangeInput = {
  from: 0,
  to: 21,
};

export * from './requests';
export * from './schema/leftindust.schema';