type Address {
  address: String!
  addressType: AddressType
  city: String!
  country: Countries!
  id: AddressId!
  postalCode: String!
  province: String!
}

type AddressId {
  value: UUID!
}

enum AddressType {
  Apartment
  Home
  Other
  School
  Work
}

""""""
scalar Base64

type Clinic {
  id: ClinicId!
  name: String!
}

type ClinicId {
  value: UUID!
}

input ClinicIdInput {
  value: UUID!
}

type CompleteSurvey {
  id: CompleteSurveyId!
  sections: [CompleteSurveySection!]!
  surveyTemplate: SurveyTemplate!
}

type CompleteSurveyId {
  value: UUID!
}

input CompleteSurveyIdInput {
  value: UUID
}

enum CompleteSurveyInputType {
  Number
  NumberArray
  String
  StringArray
}

type CompleteSurveySection {
  id: CompleteSurveySectionId!
  inputs: [CompleteSurveySectionInput!]!
}

type CompleteSurveySectionId {
  value: UUID!
}

interface CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
}

type CompleteSurveySectionInputId {
  value: UUID!
}

type CompleteSurveySectionNumberArrayInput implements CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
  numberArray: [Int!]!
}

type CompleteSurveySectionNumberInput implements CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
  number: Int!
}

type CompleteSurveySectionStringArrayInput implements CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
  stringArray: [String!]!
}

type CompleteSurveySectionStringInput implements CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
  string: String!
}

enum Countries {
  Canada
}

input CreateAddress {
  address: String!
  addressType: AddressType!
  city: String!
  country: Countries!
  postalCode: String!
  province: String!
}

input CreateClinic {
  address: CreateAddress!
  doctors: [DoctorIdInput!]! = []
  name: String!
}

input CreateCompleteSurvey {
  completeSurveyTemplateSections: [CreateCompleteSurveySection!]!
  surveyLinkId: SurveyTemplateLinkIdInput!
}

"""
this is hayneous but graphql currently doesnt support input union types, only output
"""
input CreateCompleteSurveyInput {
  numberArrayInput: [Int!]
  numberInput: Int
  stringArrayInput: [String!]
  stringInput: String
  surveyTemplateSectionInputId: SurveyTemplateSectionInputIdInput!
  type: CompleteSurveyInputType!
}

input CreateCompleteSurveySection {
  completedSurveyInputs: [CreateCompleteSurveyInput!]! = []
  surveyTemplateSectionId: SurveyTemplateSectionIdInput!
}

input CreateContact {
  emails: [CreateEmail!]! = []
  nameInfo: CreateNameInfo!
  phones: [CreatePhone!]! = []
  relationship: Relationship
}

input CreateDoctor {
  addresses: [CreateAddress!]!
  clinic: [ClinicIdInput!]!
  dateOfBirth: LocalDate
  emails: [CreateEmail!]!
  patients: [PatientIdInput!]!
  phones: [CreatePhone!]!
  title: String!
  user: CreateDoctorUser
}

input CreateDoctorUser {
  discriminant: CreateDoctorUserType!
  group: MediqGroupIdInput
  nameInfo: CreateNameInfo
  uid: String
  userUid: MediqGroupIdInput
}

enum CreateDoctorUserType {
  Create
  Find
  NoUser
}

input CreateEmail {
  email: String!
  type: EmailType!
}

input CreateNameInfo {
  firstName: String!
  lastName: String!
  middleName: String
}

input CreatePatient {
  addresses: [CreateAddress!]! = []
  dateOfBirth: LocalDate!
  doctors: [DoctorIdInput!]! = []
  emails: [CreateEmail!]! = []
  emergencyContacts: [CreateContact!]! = []
  ethnicity: Ethnicity
  gender: String
  insuranceNumber: String
  nameInfo: CreateNameInfo!
  phones: [CreatePhone!]! = []
  sex: Sex!
  thumbnail: Base64
}

input CreatePhone {
  number: String!
  type: PhoneType!
}

input CreateSurveyLink {
  patientId: PatientIdInput
  surveyTemplateId: SurveyTemplateIdInput
}

input CreateSurveyTemplate {
  calculations: [CreateSurveyTemplateCalculation!]! = []
  sections: [CreateSurveyTemplateSection!]!
  subtitle: String
  title: String!
}

input CreateSurveyTemplateCalculation {
  calculation: String!
  inputType: SurveyTemplateInputType
  label: String!
  showOnComplete: Boolean!
}

input CreateSurveyTemplateSection {
  calculationId: Int!
  inputs: [CreateSurveyTemplateSectionInput!]!
  subtitle: String
  title: String!
}

input CreateSurveyTemplateSectionInput {
  calculationId: Int!
  category: SurveyTemplateCategory!
  label: String!
  options: [String!]
  placeholder: String
  required: Boolean!
  type: SurveyTemplateInputType!
  uploadAccept: TemplateInputUploadType
  uploadMultiple: Boolean
}

input CreateUser {
  group: MediqGroupIdInput
  nameInfo: CreateNameInfo!
  uid: String!
}

type Doctor {
  addresses: [Address!]!
  dateOfBirth: LocalDate
  emails: [Email!]!
  firstName: String!
  id: DoctorId
  lastName: String!
  middleName: String
  phoneNumbers: [Phone!]!
  thumbnail: Base64
  title: String
}

type DoctorId {
  value: UUID!
}

input DoctorIdInput {
  value: UUID!
}

""""""
scalar Duration

input EditClinic {
  address: CreateAddress
  cid: ClinicIdInput!
  doctors: [DoctorIdInput!]! = []
  name: String
}

input EditDoctor {
  addresses: [CreateAddress!]
  clinics: [ClinicIdInput!]
  dateOfBirth: LocalDate
  did: DoctorIdInput!
  emails: [CreateEmail!]
  nameInfo: UpdateNameInfo
  patients: [PatientIdInput!]
  phones: [CreatePhone!]
  title: String
  userUid: String
}

input EditPatient {
  addresses: [CreateAddress!]
  dateOfBirth: LocalDate
  doctors: [DoctorIdInput!]
  emails: [CreateEmail!]
  emergencyContacts: [CreateContact!]
  ethnicity: Ethnicity
  gender: String
  insuranceNumber: String
  nameInfo: UpdateNameInfo
  phones: [CreatePhone!]
  pid: PatientIdInput!
  sex: Sex
  thumbnail: String
}

type Email {
  email: String!
  id: EmailId!
  type: EmailType!
}

type EmailId {
  value: UUID!
}

enum EmailType {
  Other
  Personal
  School
  Work
}

enum Ethnicity {
  AmericanAboriginal
  Asian
  Black
  Hispanic
  PacificIslander
  White
}

""""""
scalar LocalDate

""""""
scalar LocalDateTime

type MediqGroup {
  id: MediqGroupId!
  name: String
}

type MediqGroupId {
  value: UUID!
}

input MediqGroupIdInput {
  value: UUID
}

type MediqUser {
  accountDetails: UserAccountDetails
  group: MediqGroup
  id: MediqUserId!
  name: NameInfo!
}

type MediqUserId {
  value: String!
}

input MediqUserUniqueIdInput {
  value: String!
}

type Mutation {
  """ clinic"""
  addClinic(clinic: CreateClinic!): Clinic!

  """ doctor"""
  addDoctor(createDoctor: CreateDoctor): Doctor

  """ patient"""
  addPatient(createPatient: CreatePatient): Patient

  """ survey template"""
  addSurveyTemplate(surveyTemplate: CreateSurveyTemplate!): SurveyTemplate!

  """ complete survey"""
  createCompleteSurvey(createCompleteSurvey: CreateCompleteSurvey): CompleteSurvey

  """ user"""
  createMediqUser(createUser: CreateUser): MediqUser

  """ survey link"""
  createSurveyLink(createSurveyLink: CreateSurveyLink): SurveyLink!
  editClinic(clinic: EditClinic!): Clinic
  editDoctor(editDoctor: EditDoctor): Doctor
  editPatient(editPatient: EditPatient): Patient
}

type NameInfo {
  firstName: String!
  lastName: String!
  middleName: String
}

type Patient {
  addresses: [Address!]!
  dateOfBirth: LocalDate!
  emails: [Email!]!
  ethnicity: Ethnicity
  firstName: String!
  gender: String
  id: PatientId!
  insuranceNumber: String
  lastName: String!
  middleName: String
  phoneNumbers: [Phone!]!
  sex: Sex!
  thumbnail: Base64
}

type PatientId {
  value: UUID!
}

input PatientIdInput {
  value: UUID
}

type Phone {
  id: PhoneId!
  number: String!
  type: PhoneType!
}

type PhoneId {
  value: UUID!
}

enum PhoneType {
  Cell
  Home
  Other
  Pager
  Work
}

type Query {
  """ clinic"""
  clinicByClinicId(clinicId: ClinicIdInput!): Clinic

  """ complete survey"""
  completeSurveyById(completeSurveyId: CompleteSurveyIdInput): CompleteSurvey
  completeSurveyByRange(range: Range!): [CompleteSurvey!]!

  """ doctor"""
  doctorsByDoctorIds(doctorIds: [DoctorIdInput!]!): [Doctor]!
  doctorsByRange(range: Range!): [Doctor!]!

  """ mockingbirdIsAlive"""
  mockingbirdIsAlive: Boolean!

  """ patient"""
  patientsByPatientId(patientIds: [PatientIdInput!]!): [Patient]!
  patientsByRange(range: Range!): [Patient!]!

  """ survey link"""
  surveyLinkById(surveyLinkId: SurveyLinkIdInput!): SurveyLink

  """ survey template"""
  surveyTemplateById(surveyTemplateId: SurveyTemplateIdInput!): SurveyTemplate
  surveyTemplateByRange(range: Range!): [SurveyTemplate!]!

  """ user"""
  userByUserUniqueId(uniqueId: String!): MediqUser
}

input Range {
  from: Int
  to: Int
}

enum Relationship {
  Aunt
  Child
  Cousin
  Grandchild
  Grandparent
  Guardian
  Other
  Parent
  Partner
  Sibling
  Uncle
}

enum Sex {
  Female
  Intersex
  Male
}

type SurveyLink {
  completedSurvey: CompleteSurvey
  id: SurveyLinkId!
  patient: Patient
  surveyTemplate: SurveyTemplate!
}

type SurveyLinkId {
  value: UUID!
}

input SurveyLinkIdInput {
  value: UUID
}

type SurveyTemplate {
  calculations: [SurveyTemplateCalculation!]!
  id: SurveyTemplateId!
  sections: [SurveyTemplateSection!]!
  subtitle: String
  title: String!
}

type SurveyTemplateCalculation {
  calculation: String
  id: SurveyTemplateCalculationId!
  index: Int!
  inputType: SurveyTemplateInputType
  label: String
  showOnComplete: Boolean
}

type SurveyTemplateCalculationId {
  value: UUID!
}

enum SurveyTemplateCategory {
  Body
  Date
  Title
}

type SurveyTemplateId {
  value: UUID!
}

input SurveyTemplateIdInput {
  value: UUID!
}

type SurveyTemplateInput {
  calculationId: Int!
  category: SurveyTemplateCategory
  id: SurveyTemplateInputId!
  label: String!
  options: [String!]
  placeholder: String
  required: Boolean!
  type: SurveyTemplateInputType!
  uploadAccept: TemplateInputUploadType
  uploadMultiple: Boolean
}

type SurveyTemplateInputId {
  value: UUID!
}

enum SurveyTemplateInputType {
  Date
  MultiSelect
  Number
  Paragraph
  SingleSelect
  Text
  Title
  Upload
}

input SurveyTemplateLinkIdInput {
  value: UUID
}

type SurveyTemplateSection {
  calculationId: Int!
  id: SurveyTemplateSectionId!
  inputs: [SurveyTemplateInput!]!
  subtitle: String
  title: String!
}

type SurveyTemplateSectionId {
  value: UUID!
}

input SurveyTemplateSectionIdInput {
  value: UUID!
}

input SurveyTemplateSectionInputIdInput {
  value: UUID!
}

enum TemplateInputUploadType {
  All
  Documents
  Images
}

""""""
scalar UUID

input UpdateNameInfo {
  firstName: String
  lastName: String
  middleName: String
}

type UserAccountDetails {
  email: String
  isRegistered: Boolean!
}
