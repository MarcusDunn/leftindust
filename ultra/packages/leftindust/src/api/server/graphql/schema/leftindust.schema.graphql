enum AddressType {
  Apartment
  Home
  Other
  School
  Work
}

""""""
scalar Base64

type Clinic {
  id: ClinicId!
  name: String!
}

type ClinicId {
  value: UUID!
}

input ClinicIdInput {
  value: UUID!
}

type CompleteSurvey {
  id: CompleteSurveyId!
  sections: [CompleteSurveySection!]!
  surveyTemplate: SurveyTemplate!
}

type CompleteSurveyId {
  value: UUID!
}

input CompleteSurveyIdInput {
  value: UUID
}

type CompleteSurveySection {
  id: CompleteSurveySectionId!
  inputs: [CompleteSurveySectionInput!]!
}

type CompleteSurveySectionId {
  value: UUID!
}

type CompleteSurveySectionInput {
  id: CompleteSurveySectionInputId!
  value: String!
}

type CompleteSurveySectionInputId {
  value: UUID!
}

enum Countries {
  Canada
}

input CreateAddress {
  address: String!
  addressType: AddressType!
  city: String!
  country: Countries!
  postalCode: String!
  province: String!
}

input CreateClinic {
  address: CreateAddress!
  doctors: [DoctorIdInput!]! = []
  name: String!
}

input CreateCompleteSurvey {
  completeSurveyTemplateSections: [CreateCompleteSurveySection!]!
  surveyLinkId: SurveyTemplateLinkIdInput!
}

input CreateCompleteSurveyInput {
  surveyTemplateSectionInputId: SurveyTemplateSectionInputIdInput!
  value: String!
}

input CreateCompleteSurveySection {
  completedSurveyInputs: [CreateCompleteSurveyInput!]! = []
  surveyTemplateSectionId: SurveyTemplateSectionIdInput!
}

input CreateNameInfo {
  firstName: String!
  lastName: String!
  middleName: String
}

input CreateSurveyTemplate {
  calculations: [CreateSurveyTemplateCalculation!]! = []
  sections: [CreateSurveyTemplateSection!]!
  subtitle: String
  title: String!
}

input CreateSurveyTemplateCalculation {
  calculation: String!
  inputType: SurveyTemplateInputType
  label: String!
  showOnComplete: Boolean!
}

input CreateSurveyTemplateSection {
  calculationId: Int!
  inputs: [CreateSurveyTemplateSectionInput!]!
  subtitle: String
  title: String!
}

input CreateSurveyTemplateSectionInput {
  calculationId: Int!
  category: SurveyTemplateCategory!
  label: String!
  options: [String!]
  placeholder: String
  required: Boolean!
  type: SurveyTemplateInputType!
  uploadAccept: TemplateInputUploadType
  uploadMultiple: Boolean
}

input CreateUser {
  group: MediqGroupIdInput
  nameInfo: CreateNameInfo!
  uid: String!
}

type Doctor {
  dateOfBirth: LocalDate
  firstName: String!
  id: DoctorId
  lastName: String!
  middleName: String
  thumbnail: Base64
  title: String
}

type DoctorId {
  value: UUID!
}

input DoctorIdInput {
  value: UUID!
}

""""""
scalar Duration

input EditClinic {
  address: CreateAddress
  cid: ClinicIdInput!
  doctors: [DoctorIdInput!]! = []
  name: String
}

enum Ethnicity {
  AmericanAboriginal
  Asian
  Black
  Hispanic
  PacificIslander
  White
}

""""""
scalar LocalDate

""""""
scalar LocalDateTime

type MediqGroup {
  id: MediqGroupId!
  name: String
}

type MediqGroupId {
  value: UUID!
}

input MediqGroupIdInput {
  value: UUID
}

type MediqUser {
  accountDetails: UserAccountDetails
  group: MediqGroup
  id: MediqUserId!
  name: NameInfo!
}

type MediqUserId {
  value: String!
}

type Mutation {
  """ clinic"""
  addClinic(clinic: CreateClinic!): Clinic!

  """ survey template"""
  addSurveyTemplate(surveyTemplate: CreateSurveyTemplate!): SurveyTemplate!

  """ complete survey"""
  createCompleteSurvey(createCompleteSurvey: CreateCompleteSurvey): CompleteSurvey

  """ user"""
  createMediqUser(createUser: CreateUser): MediqUser

  """ survey link"""
  createSurveyLink(surveyTemplateId: SurveyTemplateIdInput): SurveyLink!
  editClinic(clinic: EditClinic!): Clinic
}

type NameInfo {
  firstName: String!
  lastName: String!
  middleName: String
}

type Patient {
  dateOfBirth: LocalDate!
  ethnicity: Ethnicity
  firstName: String!
  gender: String!
  id: PatientId!
  insuranceNumber: String
  lastName: String!
  middleName: String
  sex: Sex!
  thumbnail: Base64
}

type PatientId {
  value: UUID!
}

input PatientIdInput {
  value: UUID
}

type Query {
  """ clinic"""
  clinicByClinicId(clinicId: ClinicIdInput!): Clinic

  """ complete survey"""
  completeSurveyById(completeSurveyId: CompleteSurveyIdInput): CompleteSurvey

  """ doctor"""
  doctorsByDoctorIds(doctorIds: [DoctorIdInput!]!): [Doctor]!
  doctorsByRange(range: Range!): [Doctor!]!

  """ mockingbirdIsAlive"""
  mockingbirdIsAlive: Boolean!

  """ patient"""
  patientsByPatientId(patientIds: [PatientIdInput!]!): [Patient]!
  patientsByRange(range: Range!): [Patient!]!

  """ survey link"""
  surveyLinkById(surveyLinkId: SurveyLinkIdInput!): SurveyLink

  """ survey template"""
  surveyTemplateById(surveyTemplateId: SurveyTemplateIdInput!): SurveyTemplate
  surveyTemplateByRange(range: Range!): [SurveyTemplate!]!

  """ user"""
  userByUserUniqueId(uniqueId: String!): MediqUser
}

input Range {
  from: Int
  to: Int
}

enum Sex {
  Female
  Intersex
  Male
}

type SurveyLink {
  completedSurveys: [CompleteSurvey!]!
  id: SurveyLinkId!
  surveyTemplate: SurveyTemplate!
}

type SurveyLinkId {
  value: UUID!
}

input SurveyLinkIdInput {
  value: UUID
}

type SurveyTemplate {
  calculations: [SurveyTemplateCalculation!]!
  id: SurveyTemplateId!
  sections: [SurveyTemplateSection!]!
  subtitle: String
  title: String!
}

type SurveyTemplateCalculation {
  calculation: String
  id: SurveyTemplateCalculationId!
  index: Int!
  inputType: SurveyTemplateInputType
  label: String
  showOnComplete: Boolean
}

type SurveyTemplateCalculationId {
  value: UUID!
}

enum SurveyTemplateCategory {
  Body
  Date
  Title
}

type SurveyTemplateId {
  value: UUID!
}

input SurveyTemplateIdInput {
  value: UUID!
}

type SurveyTemplateInput {
  calculationId: Int!
  category: SurveyTemplateCategory
  id: SurveyTemplateInputId!
  label: String!
  options: [String!]
  placeholder: String
  required: Boolean!
  type: SurveyTemplateInputType!
  uploadAccept: TemplateInputUploadType
  uploadMultiple: Boolean
}

type SurveyTemplateInputId {
  value: UUID!
}

enum SurveyTemplateInputType {
  Date
  MultiSelect
  Number
  Paragraph
  SingleSelect
  Text
  Title
  Upload
}

input SurveyTemplateLinkIdInput {
  value: UUID
}

type SurveyTemplateSection {
  calculationId: Int!
  id: SurveyTemplateSectionId!
  inputs: [SurveyTemplateInput!]!
  subtitle: String
  title: String!
}

type SurveyTemplateSectionId {
  value: UUID!
}

input SurveyTemplateSectionIdInput {
  value: UUID!
}

input SurveyTemplateSectionInputIdInput {
  value: UUID!
}

enum TemplateInputUploadType {
  All
  Documents
  Images
}

""""""
scalar UUID

type UserAccountDetails {
  email: String
  isRegistered: Boolean!
}
