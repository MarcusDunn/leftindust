schema {
    query: Query
    mutation: Mutation
}

type Query {
    # mockingbirdIsAlive
    mockingbirdIsAlive: Boolean!

    # clinic
    clinicByClinicId(clinicId: ClinicIdInput!): Clinic

    # user
    userByUserUniqueId(uniqueId: String!): MediqUser

    # survey template
    surveyTemplateById(surveyTemplateId: SurveyTemplateIdInput!): SurveyTemplate
    surveyTemplateByRange(range: Range!): [SurveyTemplate!]!

    # survey link
    surveyLinkById(surveyLinkId: SurveyLinkIdInput!): SurveyLink

    # complete survey
    completeSurveyById(completeSurveyId: CompleteSurveyIdInput): CompleteSurvey
    completeSurveyByRange(range: Range!): [CompleteSurvey!]!
    # patient
    patientsByPatientId(patientIds: [PatientIdInput!]!): [Patient]!
    patientsByRange(range: Range!): [Patient!]!

    # doctor
    doctorsByDoctorIds(doctorIds: [DoctorIdInput!]!): [Doctor]!
    doctorsByRange(range: Range!): [Doctor!]!
}

input CompleteSurveyIdInput {
    value: UUID
}

type Mutation {
    # clinic
    addClinic(clinic: CreateClinic!): Clinic!
    editClinic(clinic: EditClinic!): Clinic

    # survey template
    addSurveyTemplate(surveyTemplate: CreateSurveyTemplate!): SurveyTemplate!

    # survey link
    createSurveyLink(createSurveyLink: CreateSurveyLink): SurveyLink!

    # complete survey
    createCompleteSurvey(createCompleteSurvey: CreateCompleteSurvey): CompleteSurvey

    # user
    createMediqUser(createUser: CreateUser): MediqUser

    # patient
    addPatient(createPatient: CreatePatient): Patient
    editPatient(editPatient: EditPatient): Patient

    # doctor
    addDoctor(createDoctor: CreateDoctor): Doctor
    editDoctor(editDoctor: EditDoctor): Doctor
}

input CreateSurveyLink {
    surveyTemplateId: SurveyTemplateIdInput
    patientId: PatientIdInput
}

input CreateUser {
    uid: String!
    nameInfo: CreateNameInfo!
    group: MediqGroupIdInput
}

input MediqGroupIdInput {
    value: UUID
}

input CreateNameInfo {
    firstName: String!
    middleName: String
    lastName: String!
}

type Doctor {
    id: DoctorId
    firstName: String!
    middleName: String
    lastName: String!
    phoneNumbers: [Phone!]!
    emails: [Email!]!
    addresses: [Address!]!
    thumbnail: Base64
    title: String
    dateOfBirth: LocalDate
}

input Range {
    from: Int
    to: Int
}

input EditClinic {
    cid: ClinicIdInput!
    name: String
    address: CreateAddress
    doctors: [DoctorIdInput!]! = []
}

type DoctorId {
    value: UUID!
}

input DoctorIdInput {
    value: UUID!
}

input CreateClinic {
    name: String!
    address: CreateAddress!
    doctors: [DoctorIdInput!]! = []
}

enum AddressType {
    Home
    Work
    School
    Apartment
    Other
}

enum Countries {
    Canada
}

input CreateAddress {
    addressType: AddressType!
    address: String!
    city: String!
    country: Countries!
    province: String!
    postalCode: String!
}

input PatientIdInput {
    value: UUID
}

input SurveyLinkIdInput {
    value: UUID
}

input CreateSurveyTemplate {
    title: String!
    subtitle: String
    sections: [CreateSurveyTemplateSection!]!
    calculations: [CreateSurveyTemplateCalculation!]! = []
}

input CreateSurveyTemplateCalculation {
    label: String!,
    inputType: SurveyTemplateInputType,
    showOnComplete: Boolean!,
    calculation: String!,
}

enum SurveyTemplateInputType {
    Text
    Number
    Date
    Paragraph
    Upload
    SingleSelect
    MultiSelect
    Title
}

input CreateSurveyTemplateSection {
    title: String!,
    subtitle: String,
    inputs: [CreateSurveyTemplateSectionInput!]!,
    calculationId: Int!
}

input CreateSurveyTemplateSectionInput {
    type: SurveyTemplateInputType!,
    label: String!,
    options: [String!],
    placeholder: String,
    required: Boolean!,
    category: SurveyTemplateCategory!,
    uploadMultiple: Boolean,
    uploadAccept: TemplateInputUploadType,
    calculationId: Int!
}

enum TemplateInputUploadType {
    All
    Images
    Documents
}

enum SurveyTemplateCategory {
    Date
    Title
    Body
}

type SurveyTemplate {
    id: SurveyTemplateId!
    title: String!
    subtitle: String
    sections: [SurveyTemplateSection!]!
    calculations: [SurveyTemplateCalculation!]!
}

type SurveyTemplateCalculation {
    id: SurveyTemplateCalculationId!
    index: Int!
    label: String
    inputType: SurveyTemplateInputType
    showOnComplete: Boolean
    calculation: String
}

type SurveyLink {
    id: SurveyLinkId!
    surveyTemplate: SurveyTemplate!
    completedSurvey: CompleteSurvey
    patient: Patient
}

type SurveyLinkId {
    value: UUID!
}

type SurveyTemplateCalculationId {
    value: UUID!
}

type SurveyTemplateInput {
    id: SurveyTemplateInputId!
    type: SurveyTemplateInputType!
    label: String!
    options: [String!]
    placeholder: String
    required: Boolean!
    category: SurveyTemplateCategory
    uploadMultiple: Boolean
    uploadAccept: TemplateInputUploadType
    calculationId: Int!
}

input UpdateNameInfo {
    firstName: String!
    middleName: String
    lastName: String!
}

input EditPatient {
    pid: PatientIdInput!
    nameInfo: UpdateNameInfo
    phones: [CreatePhone!]!
    dateOfBirth: LocalDate
    addresses: [CreateAddress!]!
    emails: [CreateEmail!]!
    insuranceNumber: String
    sex: Sex!
    gender: String!
    ethnicity: Ethnicity!
    emergencyContacts: [CreateContact!]!
    thumbnail: String
    doctor: [DoctorIdInput!]!
}

input CreatePatient {
    nameInfo: CreateNameInfo!
    phones: [CreatePhone!]! = []
    dateOfBirth: LocalDate!
    emails: [CreateEmail!]! = []
    addresses: [CreateAddress!]! = []
    insuranceNumber: String
    sex: Sex!
    gender: String!
    ethnicity: Ethnicity
    emergencyContacts: [CreateContact!]! = []
    doctors: [DoctorIdInput!]! = []
    thumbnail: Base64
}

enum CreateDoctorUserType {
    NoUser,
    Find,
    Create
}

input CreateDoctorUser {
    discriminant: CreateDoctorUserType!
    userUid: MediqGroupIdInput
    uid: String
    nameInfo: CreateNameInfo
    group: MediqGroupIdInput
}

input CreateDoctor {
    user: CreateDoctorUser
    nameInfo: CreateNameInfo
    phones: [CreatePhone!]!
    title: String!
    clinic: [ClinicIdInput!]!
    dateOfBirth: LocalDate
    addresses: [CreateAddress!]!
    emails: [CreateEmail!]!
    patients: [PatientIdInput!]!
}

input EditDoctor {
    did: DoctorIdInput!
    userUid: String
    nameInfo: UpdateNameInfo
    phones: [CreatePhone!]
    title: String
    clinics: [ClinicIdInput!]
    dateOfBirth: LocalDate
    addresses: [CreateAddress!]
    emails: [CreateEmail!]
    patients: [PatientIdInput!]
}

input CreateContact {
    nameInfo: CreateNameInfo!
    relationship: Relationship
    phones: [CreatePhone!]! = []
    emails: [CreateEmail!]! = []
}

enum Relationship {
    Parent,
    Child,
    Guardian,
    Grandparent,
    Grandchild,
    Aunt,
    Uncle,
    Cousin,
    Sibling,
    Partner,
    Other,
}

type Patient {
    id: PatientId!
    firstName: String!
    middleName: String
    lastName: String!
    phoneNumbers: [Phone!]!
    emails: [Email!]!
    addresses: [Address!]!
    thumbnail: Base64
    dateOfBirth: LocalDate!
    insuranceNumber: String
    sex: Sex!
    gender: String!
    ethnicity: Ethnicity
}

input CreatePhone {
    number: String!
    type: PhoneType!
}

type Phone {
    id: PhoneId!
    number: String!
    type: PhoneType!
}

enum PhoneType {
    Work,
    Cell,
    Home,
    Pager,
    Other,
}

type PhoneId {
    value: UUID!
}

type Address {
    id: AddressId!
    type: AddressType
    address: String!
    city: String!
    country: Countries!
    province: String!
    postalCode: String!
}

type AddressId {
    value: UUID!
}

input CreateEmail {
    email: String!
    type: EmailType!
}

type Email {
    id: EmailId!
    type: EmailType!
    email: String!
}

type EmailId {
    value: UUID!
}

enum EmailType {
    Work,
    Personal,
    School,
    Other,
}

enum Ethnicity {
    AmericanAboriginal
    Asian
    Black
    Hispanic
    PacificIslander
    White
}

enum Sex {
    Male
    Female
    Intersex
}

type PatientId {
    value: UUID!
}

type SurveyTemplateInputId {
    value: UUID!
}

type SurveyTemplateSection {
    id: SurveyTemplateSectionId!

    title: String!
    subtitle: String
    inputs: [SurveyTemplateInput!]!
    calculationId: Int!
}

type SurveyTemplateSectionId {
    value: UUID!
}

input SurveyTemplateIdInput {
    value: UUID!
}

type SurveyTemplateId {
    value: UUID!
}

type MediqUserId {
    value: String!
}

input MediqUserUniqueIdInput {
    value: String!
}

type MediqGroupId {
    value: UUID!
}

type MediqGroup {
    id: MediqGroupId!
    name: String
}

type MediqUser {
    id: MediqUserId!
    group: MediqGroup
    name: NameInfo!
    accountDetails: UserAccountDetails
}

type UserAccountDetails {
    isRegistered: Boolean!
    email: String
}

type NameInfo {
    firstName: String!
    middleName: String
    lastName: String!
}

type ClinicId {
    value: UUID!
}

input ClinicIdInput {
    value: UUID!
}

type Clinic {
    id: ClinicId!
    name: String!
}

input SurveyTemplateLinkIdInput {
    value: UUID
}

input CreateCompleteSurvey {
    surveyLinkId: SurveyTemplateLinkIdInput!
    completeSurveyTemplateSections: [CreateCompleteSurveySection!]!
}

input CreateCompleteSurveySection {
    surveyTemplateSectionId: SurveyTemplateSectionIdInput!
    completedSurveyInputs: [CreateCompleteSurveyInput!]! = []
}

input SurveyTemplateSectionIdInput {
    value: UUID!
}

#this is hayneous but graphql currently doesnt support input union types, only output
input CreateCompleteSurveyInput {
    surveyTemplateSectionInputId: SurveyTemplateSectionInputIdInput!
    type: CompleteSurveyInputType!
    stringInput: String
    numberInput: Int
    stringArrayInput: [String!]
    numberArrayInput: [Int!]
}

enum CompleteSurveyInputType {
    String,
    Number,
    StringArray,
    NumberArray
}

input SurveyTemplateSectionInputIdInput {
    value: UUID!
}

type CompleteSurvey {
    id: CompleteSurveyId!
    sections: [CompleteSurveySection!]!
    surveyTemplate: SurveyTemplate!
}

type CompleteSurveySection {
    id: CompleteSurveySectionId!
    inputs: [CompleteSurveySectionInput!]!
}

interface CompleteSurveySectionInput {
    id: CompleteSurveySectionInputId!
}

type CompleteSurveySectionStringInput implements CompleteSurveySectionInput {
    id: CompleteSurveySectionInputId!
    string: String!
}

type CompleteSurveySectionNumberInput implements CompleteSurveySectionInput {
    id: CompleteSurveySectionInputId!
    number: Int!
}

type CompleteSurveySectionStringArrayInput implements CompleteSurveySectionInput {
    id: CompleteSurveySectionInputId!
    stringArray: [String!]!
}

type CompleteSurveySectionNumberArrayInput implements CompleteSurveySectionInput {
    id: CompleteSurveySectionInputId!
    numberArray: [Int!]!
}

type CompleteSurveySectionInputId {
    value: UUID!
}

type CompleteSurveySectionId {
    value: UUID!
}

type CompleteSurveyId {
    value: UUID!
}

scalar UUID
scalar Base64
scalar Duration
scalar LocalDateTime
scalar LocalDate