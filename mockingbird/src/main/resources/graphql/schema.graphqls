schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    addClinic(clinic: CreateClinic!): Clinic!
    editClinic(clinic: EditClinic!): Clinic
}

input EditClinic {
    cid: ClinicIdInput!
    name: String
    address: CreateAddress
    doctors: [DoctorIdInput!]! = []
}

type DoctorId {
    value: UUID!
}

input DoctorIdInput {
    value: UUID!
}

input CreateClinic {
    name: String!
    address: CreateAddress!
    doctors: [DoctorIdInput!]! = []
}

enum AddressType {
    Home
    Work
    School
    Apartment
    Other
}

enum Countries {
    Canada
}

input CreateAddress {
    addressType: AddressType!
    address: String!
    city: String!
    country: Countries!
    province: String!
    postalCode: String!
}

type Query {
    eventsById(eventIds: [EventIdInput!]): [Event]!
    mockingbirdIsAlive: Boolean!
    clinicByClinicId(clinicId: ClinicIdInput!): Clinic
    userByUserUniqueId(uniqueId: String): MediqUser
}

type Event {
    id: EventId # this is provided directly by the event dto
    iCal: String # this is provided directly by the event dto
    doctors: [Doctor] # this is provided by EventDoctorController.doctors
}

type Doctor {
    id: DoctorId
}

type EventId {
    value: UUID
}

input EventIdInput {
    value: UUID
}

type MediqUserId {
    value: UUID
}

type MediqGroupId {
    value: MediqGroupId
}

type MediqGroup {
    id: MediqGroupId
    name: String
}

type MediqUser {
    id: MediqUserId
    group: MediqGroup
    name: NameInfo
    accountDetails: UserAccountDetails
}

type UserAccountDetails {
    isRegistered: Boolean!
    email: String
}

type NameInfo {
    firstName: String
    middleName: String
    lastName: String
}

type ClinicId {
    value: UUID
}

input ClinicIdInput {
    value: UUID
}

type Clinic {
    id: ClinicId
    name: String
}

scalar UUID